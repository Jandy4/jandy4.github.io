I"v<h1 id="introduction">Introduction</h1>

<p>The aim of this article is to provide a series of good general advice and considerations on how to design and write libraries, particularly if portability, ease of use and performance are of concern.</p>

<p>The word ‚Äúgame‚Äù is in parentheses since most of the advice also applies to non-game libraries.</p>

<p>Bear in mind that there is no ‚Äútrue way‚Äù to write a library and different people have different opinions, however, there do exist general advice and considerations that can be examined based on existing work.</p>

<p>The advice and considerations presented in this article are not meant for all kinds of libraries, for example, for libraries such as language-specific containers or wrappers around os functionality, some of the advice may not apply. Remember that when designing a library you should understand your requirements and do what you find to be the best approach, this article acts simply as a non-exhaustive list of good considerations and advice.</p>

<p>This article aims to present advice based on existing libraries that are considered of quality in the community so that developers can better understand some of the considerations involved in designing a library. The list does not aim to be exhaustive, but hopefully, it can be updated to include more advice and considerations over time and serves as a starting point and educational resource to anyone interested in library design.</p>

<p>The core principles of this advice are:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Maximize portability.

Be easy to build.

Be easy to integrate.

Be usable in as many scenarios as possible.
</code></pre></div></div>

<h1 id="consider-writing-the-library-in-c-and-add-wrappers-to-other-languages-later">Consider writing the library in C and add wrappers to other languages later.</h1>
<h2 id="c-is-the-lingua-franca-of-programming-there-are-many-advantages-to-writing-your-library-in-c-from-the-start">C is the lingua franca of programming. There are many advantages to writing your library in C from the start:</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Every language out there has a way to call into C, so if you write your library in C everyone will be able to use it, in any language, and people can write wrappers for it easily. If you write a library in Python, chances are most people won‚Äôt be able to use it if they don‚Äôt also use Python. If you write a library in C however, someone who really likes it can make bindings for it in Python. C truly brings all of us together.

C code is usually fast. There is a saying that if your code is slower than C, someone will rewrite it in C. Performance is especially important for game developers and people who use low-level languages in general.

C is the most portable language in the world, if your library is written in C it means it can be used on any OS, console or mobile device and even on the web.
</code></pre></div></div>

<h2 id="you-might-also-consider-writing-the-library-in-c-be-mindful-however-of-the-following-drawbacks">You might also consider writing the library in C++, be mindful however of the following drawbacks:</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>It is easier in general for a C++ user to use a C library than it is for a C user to use a C++ library.

C++ is not as easy to write wrappers for in other languages.

If you use C++, unless you limit which C++ features you use (to the point where you are pretty much left with C) a lot of people won‚Äôt be able to use your library. Not everyone uses RAII, some people disable exceptions and RTTI, and not everyone is willing to use a library with smart pointers, template metaprogramming, STL allocators, virtual dispatch, etc.
</code></pre></div></div>

<h2 id="take-into-account-the-following-aspects-when-writing-your-c-library">Take into account the following aspects when writing your C library:</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Compiler extensions make your code less portable, try using the subset of C99 which compiles both in C and C++ mode on GCC, Clang, and MSVC. This is important since some compilers (such as MSVC) have problems with supporting C.

Try not to use the hosted (OS-dependent) parts of the C standard library, unless you really have to, since they might work differently on other platforms (or might not work at all). If you need to use OS-dependent functions but want to maximize portability, request function pointers from the client.

Prefix your names to avoid name collisions (more on this later).

For maximum portability consider using the built-in C types (char, short, int, long). This is because not all compilers and platforms have support for stdint.h (eg: old versions of MSVC). Try checking for the availability of stdint.h and use that if available. As an example consider looking at how the library stb_image handles the use of stdint.h.

Consider using header guards instead of #pragma once. Header guards are standard and also allow the user of the library to check if a library was included.

Undef macros that should not be exposed to the user at the end (eg: my_min/max macros), do this even in C files.

Make sure your library can compile as one compilation unit since a lot of developers choose to do single-compilation-unit builds (also known as unity builds).
</code></pre></div></div>

<h2 id="if-you-want-to-use-another-language-for-the-implementation-consider-keeping-the-interface-in-c">If you want to use another language for the implementation, consider keeping the interface in C.</h2>

<p>If you want to write a library using another language, such as Odin, Rust, Zig, C++, etc, consider keeping the interface in C so that people can easily use it and wrap it for other languages.</p>

<p>Bear in mind that this has several disadvantages:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>People might have a harder time integrating your library into their projects as source.

You might be adding the standard library of your language of choice as an extra dependency that the user of your library now needs to consider. This can also have other implications, for example, some standard libraries use the general heap allocator, which violates the principle of giving the user of the library full control over memory allocations (more on this later). Also interfacing with certain aspects of a standard library from another language via a C API could be awkward.

You might need to provide precompiled binaries or ways for your users to build your library for their target platform. This might not be an issue with C++ but it can be with other languages (eg: Odin, Zig, Rust).

If people don't use the same language for their projects their debugging experience might suffer when using your library.
</code></pre></div></div>
:ET